// Generated by gencpp from file object_detection/lane_detect_try.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_MESSAGE_LANE_DETECT_TRY_H
#define OBJECT_DETECTION_MESSAGE_LANE_DETECT_TRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace object_detection
{
template <class ContainerAllocator>
struct lane_detect_try_
{
  typedef lane_detect_try_<ContainerAllocator> Type;

  lane_detect_try_()
    : num_of_lanes(0)
    , lane()
    , num_of_points()  {
    }
  lane_detect_try_(const ContainerAllocator& _alloc)
    : num_of_lanes(0)
    , lane(_alloc)
    , num_of_points(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_of_lanes_type;
  _num_of_lanes_type num_of_lanes;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _lane_type;
  _lane_type lane;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _num_of_points_type;
  _num_of_points_type num_of_points;





  typedef boost::shared_ptr< ::object_detection::lane_detect_try_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection::lane_detect_try_<ContainerAllocator> const> ConstPtr;

}; // struct lane_detect_try_

typedef ::object_detection::lane_detect_try_<std::allocator<void> > lane_detect_try;

typedef boost::shared_ptr< ::object_detection::lane_detect_try > lane_detect_tryPtr;
typedef boost::shared_ptr< ::object_detection::lane_detect_try const> lane_detect_tryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection::lane_detect_try_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection::lane_detect_try_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detection::lane_detect_try_<ContainerAllocator1> & lhs, const ::object_detection::lane_detect_try_<ContainerAllocator2> & rhs)
{
  return lhs.num_of_lanes == rhs.num_of_lanes &&
    lhs.lane == rhs.lane &&
    lhs.num_of_points == rhs.num_of_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detection::lane_detect_try_<ContainerAllocator1> & lhs, const ::object_detection::lane_detect_try_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::lane_detect_try_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::lane_detect_try_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::lane_detect_try_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::lane_detect_try_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::lane_detect_try_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::lane_detect_try_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection::lane_detect_try_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72b1467ef9e2f8422971062049f5c7f7";
  }

  static const char* value(const ::object_detection::lane_detect_try_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72b1467ef9e2f842ULL;
  static const uint64_t static_value2 = 0x2971062049f5c7f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection::lane_detect_try_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection/lane_detect_try";
  }

  static const char* value(const ::object_detection::lane_detect_try_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection::lane_detect_try_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num_of_lanes\n"
"geometry_msgs/Point[] lane\n"
"float32[] num_of_points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::object_detection::lane_detect_try_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection::lane_detect_try_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_of_lanes);
      stream.next(m.lane);
      stream.next(m.num_of_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lane_detect_try_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection::lane_detect_try_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection::lane_detect_try_<ContainerAllocator>& v)
  {
    s << indent << "num_of_lanes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_of_lanes);
    s << indent << "lane[]" << std::endl;
    for (size_t i = 0; i < v.lane.size(); ++i)
    {
      s << indent << "  lane[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.lane[i]);
    }
    s << indent << "num_of_points[]" << std::endl;
    for (size_t i = 0; i < v.num_of_points.size(); ++i)
    {
      s << indent << "  num_of_points[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.num_of_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_MESSAGE_LANE_DETECT_TRY_H
