// Generated by gencpp from file object_detection/lane_detect.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_MESSAGE_LANE_DETECT_H
#define OBJECT_DETECTION_MESSAGE_LANE_DETECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_detection/lane_detect_try.h>

namespace object_detection
{
template <class ContainerAllocator>
struct lane_detect_
{
  typedef lane_detect_<ContainerAllocator> Type;

  lane_detect_()
    : lanes()  {
    }
  lane_detect_(const ContainerAllocator& _alloc)
    : lanes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::object_detection::lane_detect_try_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_detection::lane_detect_try_<ContainerAllocator> >::other >  _lanes_type;
  _lanes_type lanes;





  typedef boost::shared_ptr< ::object_detection::lane_detect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection::lane_detect_<ContainerAllocator> const> ConstPtr;

}; // struct lane_detect_

typedef ::object_detection::lane_detect_<std::allocator<void> > lane_detect;

typedef boost::shared_ptr< ::object_detection::lane_detect > lane_detectPtr;
typedef boost::shared_ptr< ::object_detection::lane_detect const> lane_detectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection::lane_detect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection::lane_detect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detection::lane_detect_<ContainerAllocator1> & lhs, const ::object_detection::lane_detect_<ContainerAllocator2> & rhs)
{
  return lhs.lanes == rhs.lanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detection::lane_detect_<ContainerAllocator1> & lhs, const ::object_detection::lane_detect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::lane_detect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::lane_detect_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::lane_detect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::lane_detect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::lane_detect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::lane_detect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection::lane_detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a43b030de32eaaba0005ebbcbcc1fca";
  }

  static const char* value(const ::object_detection::lane_detect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a43b030de32eaabULL;
  static const uint64_t static_value2 = 0xa0005ebbcbcc1fcaULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection::lane_detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection/lane_detect";
  }

  static const char* value(const ::object_detection::lane_detect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection::lane_detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lane_detect_try[] lanes\n"
"\n"
"================================================================================\n"
"MSG: object_detection/lane_detect_try\n"
"int32 num_of_lanes\n"
"geometry_msgs/Point[] lane\n"
"float32[] num_of_points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::object_detection::lane_detect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection::lane_detect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lane_detect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection::lane_detect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection::lane_detect_<ContainerAllocator>& v)
  {
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_detection::lane_detect_try_<ContainerAllocator> >::stream(s, indent + "    ", v.lanes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_MESSAGE_LANE_DETECT_H
